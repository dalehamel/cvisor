#!/bin/sh

CONTAINER_NAME="$(basename $(dirname ${BASH_SOURCE[0]}))"
CONTAINER_OUTPUT="/u/containers/$CONTAINER_NAME"
CONTAINER_SOURCE=

# Embed into an initramfs
DO_EMBED=true

# Build an ISO for testing purposes
DO_GENERATE_ISO=true

DISTRO=trusty

PROFILE=ubuntu

# Sets up the default packages to install
PACKAGES="initramfs-tools,live-boot,network-manager,iproute2,net-tools,ifupdown,iputils-ping,bind9-host,ntp,ntpdate,ubuntu-minimal,ubuntu-standard"

# Extra packages to be installed after debootstrap
EXTRA_PACKAGES="openssh-server lvm2 parted mdadm curl ca-certificates grub-pc vim dmidecode pciutils binutils util-linux squashfs-tools"

EXCLUDE_PATTERN=()

# Packages to blacklist during debootstrap
BLACKLIST_PACKAGES=""

KERNEL_ARGS="installtodisk"

customize(){

  echo "deb http://ppa.launchpad.net/ubuntu-lxc/stable/ubuntu ${DISTRO} main" >> "${CONTAINER_HOME}/${CONTAINER_NAME}/rootfs/etc/apt/sources.list"
  cexec gpg --keyserver keyserver.ubuntu.com --recv 7635B973
  cexec gpg --export --armor 7635B973 | sudo apt-key add -
  cexec apt-get update

  cexec apt-get install -y lxc
  cexec apt-get install -y linux-generic-lts-vivid

  ONBOOT_PATH="/etc/lxb_onboot_script"

  cat > "${CONTAINER_HOME}/${CONTAINER_NAME}/rootfs/${ONBOOT_PATH}" << EOF
#!/bin/bash 
set -e
set -x

wait_network()
{
  MAX_RETRIES=6
  retries=0
  echo "Waiting for network"
  while [ -z "\$(ip route | grep 'default' | awk '{print \$3}')" ];do
    ip="\$(ip route | grep 'default' | awk '{print \$3}')"
    if [ -n "\${ip}" ];then
      ping -t 1 -c 1 \${ip} > /dev/null
      [ \$? -eq 0 ] && break
    fi
    retries=\$[\$retries +1]
    if [ \$retries -gt \$MAX_RETRIES ];then
      echo "Network failed to come up"
      exit 1
    fi
    sleep 5
  done
  echo "Network is up"
}

wait_network
# Fetch and run script at onboot_script_url if given
if [ -n "\$(grep onboot_script_url= /proc/cmdline)" ];then

  # Read the script URL from /proc/cmdline
  url_param=\$(grep -o 'onboot_script_url=\S*' /proc/cmdline)
  url=\${url_param#onboot_script_url=}

  curl \$url > /onboot_script
  chmod +x /onboot_script

  /onboot_script

fi
exit 0
EOF

  cat > "${CONTAINER_HOME}/${CONTAINER_NAME}/rootfs/etc/init/onboot_script.conf" << EOF
start on (started networking)

script
  ${ONBOOT_PATH}
end script
EOF

  cexec chmod +x ${ONBOOT_PATH}

}
